/**   
 * Copyright © 2019 eSunny Info. Tech Ltd. All rights reserved.
 * 
 * 功能描述：
 * @Package: com.lovdmx.control.controller.head 
 * @author: syz  
 * @date: 2019年2月21日 下午5:32:48 
 */
package com.lovdmx.control.controller.head;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.lovdmx.control.common.socket.ServerSocketThread;
import com.lovdmx.control.common.thread.AnalysisClientSocketThread;
import com.lovdmx.control.common.utils.DateUtils;
import com.lovdmx.control.common.utils.OnLineClientUtils;
import com.lovdmx.control.common.utils.PageageUtils;
import com.lovdmx.control.common.utils.SocketUtils;
import com.lovdmx.control.controller.BaseController;
import com.lovdmx.control.httpVo.FilePathVo;
import com.lovdmx.control.httpVo.LightFile;
import com.lovdmx.control.httpVo.SocketClientInfoVo;
import com.lovdmx.control.httpVo.SplitFileVo;
import com.lovdmx.control.httpVo.TimedTaskVo;
import com.lovdmx.control.httpVo.VideoFile;
import com.lovdmx.control.pojo.Account;
import com.lovdmx.control.pojo.EnumCyclicMode;
import com.lovdmx.control.pojo.EnumErrType;
import com.lovdmx.control.pojo.EnumFileType;
import com.lovdmx.control.pojo.EnumOperationMode;
import com.lovdmx.control.pojo.EnumTaskType;
import com.lovdmx.control.pojo.Err;
import com.lovdmx.control.pojo.Log;
import com.lovdmx.control.pojo.Subtasks;
import com.lovdmx.control.pojo.Tasks;
import com.lovdmx.control.pojo.UploadEdlmx;
import com.lovdmx.control.pojo.UploadVideos;
import com.lovdmx.control.service.ErrService;
import com.lovdmx.control.service.RackDeviceService;
import com.lovdmx.control.service.SpriteDeviceService;
import com.lovdmx.control.service.SubtasksService;
import com.lovdmx.control.service.TasksService;
import com.lovdmx.control.service.UploadEdlmxService;
import com.lovdmx.control.service.UploadVideosService;
import com.lovdmx.control.vo.SendSplitVo;
import com.lovdmx.control.vo.TaskFileTypeInfoVo;
import com.lovdmx.control.vo.TaskPauseOrRestoreVo;
import com.lovdmx.control.vo.UploadFileVo;

/**
 * Copyright: Copyright (c) 2019 LanRu-Caifu
 * 
 * @ClassName: ControlServerController.java
 * @Description: 中控服务端控制器
 *
 * @version: v1.0.0
 * @author: syz
 * @date: 2019年2月21日 下午5:32:48
 *
 */
@RequestMapping("/controlServer/")
@CrossOrigin
@Controller
public class ControlServerController extends BaseController {

	@Autowired
	private SubtasksService subtasksService; // 子任务

	@Autowired
	private TasksService tasksService; // 定时任务

	@Autowired
	private UploadVideosService uploadVideosService; // 已上传视频

	@Autowired
	private UploadEdlmxService uploadEdlmxService; // 已上传灯光文件

	@Autowired
	private RackDeviceService rackDeviceService; // 机架

	@Autowired
	private ErrService errService; // 报警

	@Autowired
	private SpriteDeviceService spriteDeviceService;

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 获取目录信息
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @throws Exception
	 * @date: 2019年4月1日 下午4:02:00
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月1日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "getDirectoryDataList", method = RequestMethod.GET)
	public JSONObject getDirectoryDataList(HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 获取主录放精灵客户端信息
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getSpriteClient();
			// 判断是否在线
			if (socketClientInfoVo != null) {
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1021, null);
				// 发送
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				resultJson.put("directoryList", ServerSocketThread.getDirectoryListData());
				result = "send successful";
			} else {
				// 已上传的灯光文件列表
				List<LightFile> lightFileList = uploadEdlmxService.findByLmxProjectId(account.getProjectId());
				// 已上传的视频文件列表
				List<VideoFile> videoFileList = uploadVideosService.findByVideoProjectId(account.getProjectId());
				resultJson.put("uploadEdlmxList", lightFileList);
				resultJson.put("uploadVideoList", videoFileList);
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 获取任务信息
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月1日 下午4:01:46
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月1日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "getTasksDataList", method = RequestMethod.GET)
	public JSONObject getTasksDataList(HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			List<Tasks> tasksList = tasksService.findByProjectId(account.getProjectId());
			resultJson.put("tasksList", tasksList);
			result = "true";
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 获取子任务信息
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月1日 下午4:01:27
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月1日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "getSubtasksDataList", method = RequestMethod.GET)
	public JSONObject getSubtasksDataList(HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 所有子任务
			List<Subtasks> subtasksList = subtasksService.findByParentId(account.getProjectId());
			resultJson.put("subtasksList", subtasksList);
			result = "true";
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 修改子任务
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年2月22日 下午4:22:34
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年2月22日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "updateSubtask", method = RequestMethod.GET)
	public JSONObject updateSubtask(Subtasks subtask, HttpSession session) {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			Subtasks isExitsSubtasks = subtasksService.findBySubtaskName(subtask.getSubtaskName(),
					account.getAccountId());
			if (isExitsSubtasks == null || isExitsSubtasks.getSubtaskId() == subtask.getSubtaskId()) {
				// 保存
				Integer num = subtasksService.update(subtask);
				result = num == 0 ? "fail" : "succeed";
			} else {
				result = "already exists";
			}
			// 日志
			Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.UPDATE.name(), "修改子任务",
					new Date());
			// 添加操作日志
			addlogInfo(log);
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 添加子任务
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年2月22日 下午4:22:34
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年2月22日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "addSubtask", method = RequestMethod.GET)
	public JSONObject addSubtask(Subtasks subtask, HttpSession session) {

		JSONObject resultJson = new JSONObject();
		String result = "";
		DefaultTransactionDefinition def = new DefaultTransactionDefinition();
		def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
		TransactionStatus status = platformTransactionManager.getTransaction(def);
		try {
			// 账号
			Account account = (Account) session.getAttribute("lovdmxAdmin");

			// 判断是否在线
			if (OnLineClientUtils.judgeAccountIsOnline(account)) {
				// 判断子任务名是否存在
				Subtasks subtasks = subtasksService.findBySubtaskName(subtask.getSubtaskName(), account.getProjectId());
				if (subtasks == null) {
					// 判断是灯光文件还是视频文件
					if (subtask.getType() == 0) {
						subtask.setFileType(EnumFileType.LightingFile.name());
						// 根据md5值查询 灯光是否存在
						UploadEdlmx uploadEdlmx = uploadEdlmxService.findByMd5(subtask.getMd5());
						// 灯光文件存在状态改为1（上传）,路径改为 上传的路径
						if (uploadEdlmx != null) {
							subtask.setRtrLoaded(uploadEdlmx.getRtrLoaded());
						}
					} else {
						subtask.setFileType(EnumFileType.VideoFile.name());
						// 根据md5值查询 视频是否存在
						UploadVideos uploadVideo = uploadVideosService.findByMd5(subtask.getMd5());
						// 视频文件存在状态改为1（上传）,路径改为 上传的路径
						if (uploadVideo != null) {
							subtask.setRtrLoaded(uploadVideo.getRtrLoaded());
						}
					}
					subtask.setProjectId(account.getProjectId());
					// 创建时间
					subtask.setCreateTime(new Date());
					// 保存
					Integer num = subtasksService.save(subtask);
					// 日志
					Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
							"添加子任务", new Date());
					// 添加操作日志
					addlogInfo(log);
					result = num == 0 ? "fail" : "succeed";
					platformTransactionManager.commit(status);
				} else {
					result = "already exists";
				}
			} else {
				result = "false";
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			platformTransactionManager.rollback(status);
			result = "err";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: (主)录放精灵上传文件
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月2日 下午5:24:35
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月2日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("uploadSpriteFile")
	public JSONObject uploadSpriteFile(UploadFileVo uploadFileVo, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 判断是否在线
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getSpriteClient();
			if (socketClientInfoVo != null) {
				uploadFileVo.setAccountId(account.getAccountId());
				uploadFileVo.setProjectId(account.getProjectId());
				boolean uploadStatus = false;
				if (uploadFileVo.getFileType() == 0) {
					UploadVideos uploadVideo = uploadVideosService.findByMd5(uploadFileVo.getMd5());
					uploadStatus = uploadVideo == null ? true : false;
				} else {
					UploadEdlmx uploadEdlmx = uploadEdlmxService.findByMd5(uploadFileVo.getMd5());
					uploadStatus = uploadEdlmx == null ? true : false;
				}
				// 判断是否存在
				if (uploadStatus) {
					// 组装web数据（用于后续操作）
					JSONObject webJsonData = (JSONObject) JSONObject.toJSON(uploadFileVo);
					// 日志
					Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
							"添加上传信息", new Date());
					// 获取UUID
					String uuid = UUID.randomUUID().toString();
					webJsonData.put("uuid", uuid);
					webJsonData.put("log", log);

					// 组装发送客户端数据
					JSONObject sendClientJson = new JSONObject();
					sendClientJson.put("filePath", uploadFileVo.getFilePath());
					sendClientJson.put("uuid", uuid);

					// 添加ProjectAnalysisOpCodeThread对象的map中
					SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
							.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);

					// 组装数据
					byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1025, sendClientJson.toJSONString());
					// 发送
					AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
					result = "send successful";
				} else {
					result = "already exists";
				}
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 切割指定视频
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月21日 上午10:13:09
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月21日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendVideoSplit")
	public JSONObject sendVideoSplit(SendSplitVo sendSplitVo, HttpSession session) throws Exception {

		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 判断是否在线
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				sendSplitVo.setAccountId(account.getAccountId());
				sendSplitVo.setProjectId(account.getProjectId());
				// 分割为数组ID
				String[] arrayId = sendSplitVo.getIds().split(",");
				// 所有机架ID(逗号隔开)
				String cabinetNums = rackDeviceService.findGroupCounatRackIdByProjectId(sendSplitVo.getProjectId());
				// 根据数组id 获取为切割的视频数据
				List<UploadVideos> uploadVideosList = uploadVideosService.findNotSpiltByIds(arrayId);

				if (uploadVideosList == null || uploadVideosList.size() == 0) {
					result = "already split";
				} else {
					List<FilePathVo> filePathList = new ArrayList<FilePathVo>();
					// 遍历组装
					for (UploadVideos uploadVideo : uploadVideosList) {
						FilePathVo filePath = new FilePathVo(uploadVideo.getFilePath(), uploadVideo.getMd5());
						filePathList.add(filePath);
					}
					SplitFileVo splitFile = new SplitFileVo(cabinetNums, filePathList);
					// 转成JSON格式数据
					net.sf.json.JSONObject dataJson = net.sf.json.JSONObject.fromObject(splitFile);
					// 获取UUID
					String uuid = splitFile.getFileNames().get(0).getMd5();
					dataJson.put("uuid", uuid);

					// 组装web数据（用于后续操作）
					JSONObject webJsonData = new JSONObject();
					// 日志
					Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.UPDATE.name(),
							"添加上传信息", new Date());
					webJsonData.put("log", log);
					// state (-1 分发丢失,1 正常分发);
					webJsonData.put("state", 1);
					// 添加ProjectAnalysisOpCodeThread对象的map中
					SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
							.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);
					// 组装数据
					byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1001, dataJson.toString());
					// 发送数据
					AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
					result = "send successful";
				}
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 切割指定灯光
	 *
	 * @param:
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月21日 上午10:13:52
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月21日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendEdlmxSplit")
	public JSONObject sendEdlmxSplit(SendSplitVo sendSplitVo, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 判断是否在线
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				sendSplitVo.setAccountId(account.getAccountId());
				sendSplitVo.setProjectId(account.getProjectId());
				// 分割为数组ID
				String[] arrayId = sendSplitVo.getIds().split(",");
				// 所有机架ID(逗号隔开)
				String cabinetNums = rackDeviceService.findGroupCounatRackIdByProjectId(sendSplitVo.getProjectId());
				// 根据数组id 获取为切割的视频数据
				List<UploadEdlmx> uploadEdlmxList = uploadEdlmxService.findNotSpiltByIds(arrayId);
				List<FilePathVo> filePathList = new ArrayList<FilePathVo>();
				if (uploadEdlmxList == null || uploadEdlmxList.size() == 0) {
					result = "already split";
				} else {
					// 遍历组装
					for (UploadEdlmx uploadEdlmx : uploadEdlmxList) {
						FilePathVo filePath = new FilePathVo(uploadEdlmx.getFilePath(), uploadEdlmx.getMd5());
						filePathList.add(filePath);
					}
					SplitFileVo splitFile = new SplitFileVo(cabinetNums, filePathList);
					// 转成JSON格式数据
					net.sf.json.JSONObject dataJson = net.sf.json.JSONObject.fromObject(splitFile);
					// 获取UUID
					String uuid = splitFile.getFileNames().get(0).getMd5();
					dataJson.put("uuid", uuid);
					// 组装web数据（用于后续操作）
					JSONObject webJsonData = new JSONObject();
					// 日志
					Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.UPDATE.name(),
							"添加上传信息", new Date());
					webJsonData.put("log", log);
					// state (-1 分发丢失,1 正常分发);
					webJsonData.put("state", 1);
					// 添加ProjectAnalysisOpCodeThread对象的map中
					SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
							.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);
					// 组装数据
					byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1002, dataJson.toString());
					// 发送数据
					AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
					result = "send successful";
				}
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 添加定时任务
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @throws Exception
	 * @date: 2019年3月21日 上午10:11:43
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月21日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "addTimedTask", method = RequestMethod.GET)
	public JSONObject addTimedTask(Tasks task, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 获取中控客户端信息
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				// 判断定时任务名是否存在
				Tasks tak = tasksService.findByTaskName(task.getTaskName(), account.getProjectId());
				if (tak == null) {
					// 所有机架ID(逗号隔开)
					String cabinetNums = rackDeviceService.findGroupCounatRackIdByProjectId(account.getProjectId());
					// 赋值数据
					task.initTaskDate(EnumTaskType.getTaskTypeName(task.getType()),
							EnumCyclicMode.getCyclicModeName(task.getMode()), account.getProjectId(),
							DateUtils.currentlyDate(DateUtils.stampToDate(task.getStartTimestamp())),
							DateUtils.currentlyDate(DateUtils.stampToDate(task.getEndTimestamp())),
							DateUtils.fmtStrDateToTime(task.getStrStartTime()),
							DateUtils.fmtStrDateToTime(task.getStrEndTime()), cabinetNums, new Date());

					String[] arrayIds = task.getSubtaskIds().split(",");
					// 根据ids 获取子任务信息
					List<Subtasks> subtskList = subtasksService.findByIds(arrayIds);
					// 根据ids 获取子任务只获取LightingFile类型信息
					List<Subtasks> lmxSubtskList = subtasksService.findByIdsAndFileType(arrayIds,
							EnumFileType.LightingFile.name());
					// 根据ids 获取子任务只获取VideoFile类型信息
					List<Subtasks> videoSubtskList = subtasksService.findByIdsAndFileType(arrayIds,
							EnumFileType.VideoFile.name());
					// 组装灯光文件的 md5值（逗号隔开）
					StringBuilder lmxsbl = new StringBuilder();
					// 组装视频文件的 md5值（逗号隔开）
					StringBuilder videosbl = new StringBuilder();
					for (Subtasks subtasks : lmxSubtskList) {
						lmxsbl.append(subtasks.getMd5()).append(",");
					}

					for (Subtasks subtasks : videoSubtskList) {
						videosbl.append(subtasks.getMd5()).append(",");
					}

					// 根据md5 获取已上传的视频信息
					List<UploadVideos> uploadVideosList = uploadVideosService
							.findByMd5s(videosbl.toString().split(","));
					// 根据md5 获取已上传的灯光信息
					List<UploadEdlmx> uploadEdlmxList = uploadEdlmxService.findByMd5s(lmxsbl.toString().split(","));
					// 遍历组装 任务信息
					List<TaskFileTypeInfoVo> taskFileTypeInfoList = new ArrayList<TaskFileTypeInfoVo>();
					for (Subtasks subtask : subtskList) {
						TaskFileTypeInfoVo taskFileTypeInfo = new TaskFileTypeInfoVo();
						taskFileTypeInfo.setFileType(subtask.getFileType());
						// 视频组装
						if (subtask.getFileType().equals(EnumFileType.VideoFile.name())) {
							for (UploadVideos uploadVideo : uploadVideosList) {
								if (subtask.getMd5().equals(uploadVideo.getMd5())) {
									taskFileTypeInfo.setFileInfo("" + uploadVideo.getFileIndex());
									taskFileTypeInfo.setFileDuration("" + uploadVideo.getTime());
									break;
								}
							}
							// 灯光组装
						} else {
							for (UploadEdlmx uploadEdlmx : uploadEdlmxList) {
								if (subtask.getMd5().equals(uploadEdlmx.getMd5())) {
									taskFileTypeInfo.setFileInfo("" + uploadEdlmx.getMd5());
									taskFileTypeInfo.setFileDuration("" + uploadEdlmx.getTime());
									break;
								}
							}
						}
						taskFileTypeInfoList.add(taskFileTypeInfo);
					}

					// 获取UUID
					String uuid = UUID.randomUUID().toString();
					TimedTaskVo taskVo = new TimedTaskVo(task.getTaskName(), task.getType(), task.getMode(),
							task.getCyclicDate(), DateUtils.currentlyStrDate(task.getStartDate()),
							DateUtils.currentlyStrDate(task.getEndDate()), task.getStrStartTime(), task.getStrEndTime(),
							taskFileTypeInfoList, uuid);

					// 组装发送数据
					JSONObject dataJson = new JSONObject();
					dataJson.put("taskMsg", taskVo);
					dataJson.put("rackId", cabinetNums);
					dataJson.put("uuid", uuid);

					// 组装web数据（用于后续操作）
					JSONObject webJsonData = new JSONObject();
					// 日志
					Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
							"添加上传信息", new Date());
					webJsonData.put("task", task);
					webJsonData.put("accountId", account.getAccountId());
					webJsonData.put("log", log);
					// state (-1 分发丢失,1 正常分发);
					webJsonData.put("state", 1);
					// 添加ProjectAnalysisOpCodeThread对象的map中
					SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
							.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);

					// 组装数据
					byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1003, dataJson.toJSONString());
					// 发送数据
					AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
					result = "send successful";
				} else {
					result = "already exists";
				}
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 获取Sprite 在线和未在线数量
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月24日 下午4:56:44
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月24日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("getSpriteOnlineNumber")
	public JSONObject getSpriteOnlineNumber(HttpSession session) {

		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// Not Online 数量
			Integer notOnlineNumber = spriteDeviceService.findNumberByProjectIdAndIsOnlineStatus(0,
					account.getProjectId());
			// Online 数量
			Integer onlineNumber = spriteDeviceService.findNumberByProjectIdAndIsOnlineStatus(1,
					account.getProjectId());
			resultJson.put("online", onlineNumber);
			resultJson.put("notOnlineNumber", notOnlineNumber);
			result = "true";
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 发送暂停任务
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月21日 上午10:45:01
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月21日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendPauseTask")
	public JSONObject sendPauseTask(HttpSession session) throws Exception {

		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 获取中控客户端信息
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				// 所有机架ID(逗号隔开)
				String cabinetNums = rackDeviceService.findGroupCounatRackIdByProjectId(account.getProjectId());
				// 获取UUID
				String uuid = UUID.randomUUID().toString();
				JSONObject jsonData = new JSONObject();
				TaskPauseOrRestoreVo taskPauseOrRestore = new TaskPauseOrRestoreVo(uuid, "0");

				jsonData.put("rackId", cabinetNums);
				jsonData.put("uuid", uuid);
				jsonData.put("taskMsg", taskPauseOrRestore);

				JSONObject webJsonData = new JSONObject();
				// 日志
				Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
						"添加上传信息", new Date());
				webJsonData.put("accountId", account.getAccountId());
				webJsonData.put("log", log);
				// 添加ProjectAnalysisOpCodeThread对象的map中
				SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
						.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1004, jsonData.toJSONString());
				// 发送数据
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				result = "send successful";
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 发送恢复任务
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月21日 上午10:45:01
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月21日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendRestoreTask")
	public JSONObject sendRestoreTask(HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 获取中控客户端信息
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				// 所有机架ID(逗号隔开)
				String cabinetNums = rackDeviceService.findGroupCounatRackIdByProjectId(account.getProjectId());
				// 获取UUID
				String uuid = UUID.randomUUID().toString();
				JSONObject jsonData = new JSONObject();

				TaskPauseOrRestoreVo taskPauseOrRestore = new TaskPauseOrRestoreVo(uuid, "1");

				jsonData.put("rackId", cabinetNums);
				jsonData.put("uuid", uuid);
				jsonData.put("taskMsg", taskPauseOrRestore);

				JSONObject webJsonData = new JSONObject();
				// 日志
				Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
						"添加上传信息", new Date());
				webJsonData.put("accountId", account.getAccountId());
				webJsonData.put("log", log);
				// 添加ProjectAnalysisOpCodeThread对象的map中
				SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
						.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1005, jsonData.toJSONString());
				// 发送数据
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				result = "send successful";
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 根据 参数获取报警信息
	 *
	 * @param:deviceType 设备类型
	 * @param: resolutionState
	 *             解决状态
	 * @param: startTime
	 *             开始时间
	 * @param: endTime
	 *             结束时间
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("findConditionQueryAlarmData")
	public JSONObject findConditionQueryAlarmData(String deviceType, Integer resolutionState, String startTime,
			String endTime, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 根据条件获取报警信息
			List<Err> errList = errService.findConditionQueryAlarmData(account.getProjectId(), deviceType,
					resolutionState, startTime, endTime);
			// 根据条件查询 分组获取报警日期的数量
			List<Err> alarmDateList = errService.findAlarmDateNumber(account.getProjectId(), deviceType,
					resolutionState, startTime, endTime);

			resultJson.put("errList", errList);
			resultJson.put("alarmDateList", alarmDateList);
			result = "true";
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 判断子任务是否存在
	 *
	 * @param:deviceType 设备类型
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("findSubtaskExits")
	public JSONObject findSubtaskExits(String subtaskName, HttpSession session) {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 根据条件获取报警信息
			Subtasks subtask = subtasksService.findBySubtaskName(subtaskName, account.getProjectId());
			if (subtask == null) {
				result = "true";
			} else {
				result = "already exists";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description: 判断定时任务是否存在
	 *
	 * @param:deviceType 设备类型
	 * 
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("findTaskExit")
	public JSONObject findTaskExit(String taskName, HttpSession session) {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");
		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 根据条件获取报警信息
			Tasks task = tasksService.findByTaskName(taskName, account.getProjectId());
			if (task == null) {
				result = "true";
			} else {
				result = "already exists";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description:发送（指定录放精灵）丢失的 切割灯光文件
	 *
	 * @param:fileMd5 丢失文件
	 *                    md5值
	 * 
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendLoseEdlmxFileSpilt")
	public JSONObject sendLoseEdlmxFileSpilt(String fileMd5, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 判断是否在线
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				// 所有丢失机架ID(逗号隔开)
				String cabinetNums = errService.findLoseGroupCounatRackIdByTypeMd5AndErrType(account.getProjectId(),
						fileMd5, EnumErrType.Lmx.name());
				// 获取已上传的灯光文件信息
				UploadEdlmx uploadEdlmx = uploadEdlmxService.findByMd5(fileMd5);
				// 组装数据
				List<FilePathVo> filePathList = new ArrayList<FilePathVo>();
				FilePathVo filePath = new FilePathVo(uploadEdlmx.getFilePath(), uploadEdlmx.getMd5());
				filePathList.add(filePath);
				SplitFileVo splitFile = new SplitFileVo(cabinetNums, filePathList);
				// 转成JSON格式数据
				net.sf.json.JSONObject dataJson = net.sf.json.JSONObject.fromObject(splitFile);
				dataJson.put("uuid", fileMd5);
				// 组装web数据（用于后续操作）
				JSONObject webJsonData = new JSONObject();
				// 日志
				Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.UPDATE.name(),
						"添加上传信息", new Date());
				webJsonData.put("log", log);
				// state (-1 分发丢失,1 正常分发);
				webJsonData.put("state", -1);
				// 添加ProjectAnalysisOpCodeThread对象的map中
				SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
						.getProjectAnalysisOpCodeThread().addMapInfo(fileMd5, webJsonData);
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1002, dataJson.toString());

				// 发送数据
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				result = "send successful";
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description:发送（指定RTR服务器）丢失的 切割视频文件
	 *
	 * @param:fileMd5 丢失文件
	 *                    md5值
	 * 
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendLoseVideoFileSpilt")
	public JSONObject sendLoseVideoFileSpilt(String fileMd5, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 判断是否在线
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {
				// 所有丢失机架ID(逗号隔开)
				String cabinetNums = errService.findLoseGroupCounatRackIdByTypeMd5AndErrType(account.getProjectId(),
						fileMd5, EnumErrType.Video.name());
				// 获取已上传的灯光文件信息
				UploadEdlmx uploadEdlmx = uploadEdlmxService.findByMd5(fileMd5);
				// 组装数据
				List<FilePathVo> filePathList = new ArrayList<FilePathVo>();
				FilePathVo filePath = new FilePathVo(uploadEdlmx.getFilePath(), uploadEdlmx.getMd5());
				filePathList.add(filePath);
				SplitFileVo splitFile = new SplitFileVo(cabinetNums, filePathList);
				// 转成JSON格式数据
				net.sf.json.JSONObject dataJson = net.sf.json.JSONObject.fromObject(splitFile);
				dataJson.put("uuid", fileMd5);
				// 组装web数据（用于后续操作）
				JSONObject webJsonData = new JSONObject();
				// 日志
				Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.UPDATE.name(),
						"添加上传信息", new Date());
				webJsonData.put("log", log);
				// state (-1 分发丢失,1 正常分发);
				webJsonData.put("state", -1);
				// 添加ProjectAnalysisOpCodeThread对象的map中
				SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
						.getProjectAnalysisOpCodeThread().addMapInfo(fileMd5, webJsonData);
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1001, dataJson.toString());
				// 发送数据
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				result = "send successful";
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

	/**
	 * 
	 * @Function: ControlServerController.java
	 * @Description:发送（指定录放精灵）丢失的 定时任务
	 *
	 * @param:taskName 丢失的定时任务名
	 * 
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年4月10日 下午1:43:48
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年4月10日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping("sendLoseTimedTask")
	public JSONObject sendLoseTimedTask(String taskName, HttpSession session) throws Exception {
		JSONObject resultJson = new JSONObject();
		String result = "";
		// 账号
		Account account = (Account) session.getAttribute("lovdmxAdmin");

		// 判断是否在线
		if (OnLineClientUtils.judgeAccountIsOnline(account)) {
			// 获取中控客户端信息
			SocketClientInfoVo socketClientInfoVo = OnLineClientUtils.getControlClient();
			if (socketClientInfoVo != null) {

				// 所有机架ID(逗号隔开)
				String cabinetNums = errService.findLoseGroupCounatRackIdByTaskNameAndErrType(account.getProjectId(),
						taskName, EnumErrType.Task.name());
				// 赋值数据

				Tasks task = tasksService.findByTaskName(taskName, account.getProjectId());

				String[] arrayIds = task.getSubtaskIds().split(",");
				// 根据ids 获取子任务信息
				List<Subtasks> subtskList = subtasksService.findByIds(arrayIds);
				// 根据ids 获取子任务只获取LightingFile类型信息
				List<Subtasks> lmxSubtskList = subtasksService.findByIdsAndFileType(arrayIds,
						EnumFileType.LightingFile.name());
				// 根据ids 获取子任务只获取VideoFile类型信息
				List<Subtasks> videoSubtskList = subtasksService.findByIdsAndFileType(arrayIds,
						EnumFileType.VideoFile.name());
				// 组装灯光文件的 md5值（逗号隔开）
				StringBuilder lmxsbl = new StringBuilder();
				// 组装视频文件的 md5值（逗号隔开）
				StringBuilder videosbl = new StringBuilder();
				for (Subtasks subtasks : lmxSubtskList) {
					lmxsbl.append(subtasks.getMd5()).append(",");
				}

				for (Subtasks subtasks : videoSubtskList) {
					videosbl.append(subtasks.getMd5()).append(",");
				}

				// 根据md5 获取已上传的视频信息
				List<UploadVideos> uploadVideosList = uploadVideosService.findByMd5s(videosbl.toString().split(","));
				// 根据md5 获取已上传的灯光信息
				List<UploadEdlmx> uploadEdlmxList = uploadEdlmxService.findByMd5s(lmxsbl.toString().split(","));
				// 遍历组装 任务信息
				List<TaskFileTypeInfoVo> taskFileTypeInfoList = new ArrayList<TaskFileTypeInfoVo>();
				for (Subtasks subtask : subtskList) {
					TaskFileTypeInfoVo taskFileTypeInfo = new TaskFileTypeInfoVo();
					taskFileTypeInfo.setFileType(subtask.getFileType());
					// 视频组装
					if (subtask.getFileType().equals(EnumFileType.VideoFile.name())) {
						for (UploadVideos uploadVideo : uploadVideosList) {
							if (subtask.getMd5().equals(uploadVideo.getMd5())) {
								taskFileTypeInfo.setFileInfo("" + uploadVideo.getFileIndex());
								taskFileTypeInfo.setFileDuration("" + uploadVideo.getTime());
								break;
							}
						}
						// 灯光组装
					} else {
						for (UploadEdlmx uploadEdlmx : uploadEdlmxList) {
							if (subtask.getMd5().equals(uploadEdlmx.getMd5())) {
								taskFileTypeInfo.setFileInfo("" + uploadEdlmx.getMd5());
								taskFileTypeInfo.setFileDuration("" + uploadEdlmx.getTime());
								break;
							}
						}
					}
					taskFileTypeInfoList.add(taskFileTypeInfo);
				}

				// 获取UUID
				String uuid = UUID.randomUUID().toString();
				TimedTaskVo taskVo = new TimedTaskVo(task.getTaskName(), task.getType(), task.getMode(),
						task.getCyclicDate(), DateUtils.currentlyStrDate(task.getStartDate()),
						DateUtils.currentlyStrDate(task.getEndDate()), task.getStrStartTime(), task.getStrEndTime(),
						taskFileTypeInfoList, uuid);

				// 组装发送数据
				JSONObject dataJson = new JSONObject();
				dataJson.put("taskMsg", taskVo);
				dataJson.put("rackId", cabinetNums);
				dataJson.put("uuid", uuid);

				// 组装web数据（用于后续操作）
				JSONObject webJsonData = new JSONObject();
				// 日志
				Log log = new Log(account.getProjectId(), account.getAccountId(), EnumOperationMode.ADD.name(),
						"添加上传信息", new Date());
				webJsonData.put("task", task);
				webJsonData.put("accountId", account.getAccountId());
				webJsonData.put("log", log);
				// state (-1 分发丢失,1 正常分发);
				webJsonData.put("state", -1);
				// 添加ProjectAnalysisOpCodeThread对象的map中
				SocketUtils.projectThreadMap.get(SocketUtils.key + account.getProjectId())
						.getProjectAnalysisOpCodeThread().addMapInfo(uuid, webJsonData);
				// 组装数据
				byte[] dataBytes = PageageUtils.assemblyDataPackage(0x1003, dataJson.toJSONString());
				// 发送数据
				AnalysisClientSocketThread.transmit(socketClientInfoVo.getAnalysisSocketThread(), dataBytes);
				result = "send successful";
			} else {
				result = "not online";
			}
		} else {
			result = "false";
		}
		resultJson.put("result", result);
		return resultJson;
	}

}
