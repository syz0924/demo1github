/**
 * 
 */
package com.lovdmx.control.controller.head;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.lovdmx.control.common.exception.AccountNotExitException;
import com.lovdmx.control.common.exception.PasswordErrorException;
import com.lovdmx.control.common.exception.StatusNoExitException;
import com.lovdmx.control.common.utils.CaptchaUtil;
import com.lovdmx.control.common.utils.CookieUtils;
import com.lovdmx.control.common.utils.ResponseUtils;
import com.lovdmx.control.controller.BaseController;
import com.lovdmx.control.pojo.Account;
import com.lovdmx.control.service.AccountService;

/**
 *
 * @author syz
 * @Date 2018年11月21日
 * @version 2.0
 */
@Controller
@RequestMapping("/")
@CrossOrigin
public class HomeController extends BaseController {

	@Autowired
	private AccountService accountService;

	/**
	 * 
	 * @Function: HomeController.java
	 * @Description: 跳转登录界面
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月30日 下午4:08:04
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月30日 Administrator v1.0.0 修改原因
	 */
	@RequestMapping(value = "login")
	public String login(HttpServletRequest request) {
		Cookie[] cookies = request.getCookies();
		String userName = "";
		String password = "";
		// cookie中的账号
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("lovdmxControlUserName")) {
					userName = cookie.getValue();
					continue;
				}
				if (cookie.getName().equals("lovdmxControlPassword")) {
					password = cookie.getValue();
					continue;
				}
			}
		}
		request.setAttribute("lovdmxControlUserName", CookieUtils.decodeBase64(userName));
		request.setAttribute("lovdmxControlPassword", CookieUtils.decodeBase64(password));
		return "login";
	}

	/**
	 * 
	 * @Function: HomeController.java
	 * @Description: 登录
	 *
	 * @param: userName
	 *             账号
	 * @param: password
	 *             密码
	 * @param: check
	 *             记住密码
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年3月30日 下午4:07:19
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年3月30日 Administrator v1.0.0 修改原因
	 */
	@ResponseBody
	@RequestMapping(value = "login", method = RequestMethod.POST)
	public JSONObject login(@RequestBody Account act, HttpServletRequest request, HttpServletResponse response,
			HttpSession session) {
		JSONObject jSONObject = new JSONObject();
		try {
			Account account = accountService.login(act.getUserName(), act.getPassword());
			if (account != null) {
				if (account.getRoleId() == 1) {
					// 超级用户
					jSONObject.put("flag", "0");
				} else {
					// 普通用户
					jSONObject.put("flag", "1");
				}
				jSONObject.put("account", account);
				// 保存到cookie中
				Cookie nameCookie = null;
				Cookie pwdCookie = null;
				nameCookie = new Cookie("lovdmxControlUserName", CookieUtils.encodeBase64(account.getUserName()));
				pwdCookie = new Cookie("lovdmxControlPassword", CookieUtils.encodeBase64(act.getPassword()));
				if (act.isCheck() == true) {
					// 设置时间
					nameCookie.setMaxAge(60 * 60 * 24 * 30);
					pwdCookie.setMaxAge(60 * 60 * 24 * 30);
				} else {
					nameCookie.setMaxAge(0);
					pwdCookie.setMaxAge(0);
				}
				nameCookie.setPath("/");
				// 账号密码保存到浏览器中
				response.addCookie(nameCookie);
				response.addCookie(pwdCookie);
				session.setAttribute("lovdmxAdmin", account);
			}
		} catch (AccountNotExitException e) {
			// 账号不存在
			jSONObject.put("flag", "2");
		} catch (PasswordErrorException e) {
			// 密码错误
			jSONObject.put("flag", "3");
		} catch (StatusNoExitException e) {
			// 账号已禁用
			jSONObject.put("flag", "4");
		} catch (Exception e) {
			e.printStackTrace();
			jSONObject.put("flag", "5");
		}
		return jSONObject;
	}

	@RequestMapping(value = "index")
	public String index() {
		return "index";
	}

	/**
	 * 获取验证码图片
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "captcha", method = RequestMethod.GET)
	@ResponseBody
	public void captcha(HttpServletRequest request, HttpServletResponse response) throws Exception {
		CaptchaUtil.outputCaptcha(request, response);
	}

	@RequestMapping(value = "getCookieAccountInfo", method = RequestMethod.GET)
	@ResponseBody
	public boolean getCookieAccountInfo(HttpServletRequest request) {
		Cookie[] cookies = request.getCookies();
		String userName = "";
		String password = "";
		// cookie中的账号
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("lovdmxControlUserName")) {
					userName = cookie.getValue();
					continue;
				}
				if (cookie.getName().equals("lovdmxControlPassword")) {
					password = cookie.getValue();
					continue;
				}
			}
		}
		if (userName != null && !userName.equals("") && password != null && !password.equals("")) {
			userName = CookieUtils.decodeBase64(userName);
			password = CookieUtils.decodeBase64(password);
			Account account = accountService.login(userName, password);
			request.getSession().setAttribute("lovdmxAdmin", account);
			return true;
		}
		return false;
	}

	/**
	 * 判断验证码是否一致
	 * 
	 * @param code
	 *            验证码
	 * @param session
	 * @param response
	 */
	@RequestMapping("areEqualsCode")
	public void areEqualsCode(String code, HttpSession session, HttpServletResponse response) {
		String randomString = (String) session.getAttribute("randomString");
		String flag = "0";
		// 不区分大小写
		if (randomString.equalsIgnoreCase(code))
			flag = "1";
		ResponseUtils.renderText(response, flag);
	}

	/**
	 * 退出登录
	 * 
	 * @param session
	 * @return
	 */
	@RequestMapping("remove")
	public String remove(HttpSession session) {
		session.removeAttribute("lovdmxAdmin");
		return "redirect:/lovdmx/ht/login.do";
	}
}
