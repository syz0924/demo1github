/**   
 * Copyright © 2019 eSunny Info. Tech Ltd. All rights reserved.
 * 
 * 功能描述：
 * @Package: com.lovdmx.control.common.thread 
 * @author: Administrator   
 * @date: 2019年2月16日 上午10:35:39 
 */
package com.lovdmx.control.common.socket;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.lovdmx.control.common.packet.PageageUtils;
import com.lovdmx.control.common.thread.RealTimeDeviceInfoThread;
import com.lovdmx.control.common.thread.SpriteAnalysisSocketThread;
import com.lovdmx.control.httpVo.SpriteAnalysisAndRealTimeDataVo;

/**
 * Copyright: Copyright (c) 2019 LanRu-Caifu
 * 
 * @ClassName: SpriteServerSocketThread.java
 * @Description: 该类的功能描述
 *
 * @version: v1.0.0
 * @author: syz
 * @date: 2019年2月16日 上午10:35:39
 *
 */
public class SpriteServerSocketThread extends SocketUtils implements Runnable {

	public static Socket socket = null;

	// 服务端socket
	private ServerSocket serverScoket = null;
	// 端口号
	private static final int ServerPort = 9008;

	// Map中Integer 代表发送端的标识
	// 根据key 来开启线程，所有的线程都保存到map键值对中
	public static Map<String, SpriteAnalysisAndRealTimeDataVo> map = new ConcurrentHashMap<String, SpriteAnalysisAndRealTimeDataVo>();
	// 文件JSON数据
	private static String fileJsonData = null;

	public synchronized static String getFileJsonData() {
		return fileJsonData;
	}

	public synchronized static void setFileJsonData(String fileJsonData) {
		SpriteServerSocketThread.fileJsonData = fileJsonData;
	}

	public SpriteServerSocketThread() {
	}

	/**
	 * @see java.lang.Runnable#run()
	 * @Function: SpriteServiceSocketThread.java
	 * @Description: 监听Sprite客户端线程
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: Administrator
	 * @date: 2019年1月18日 下午3:32:45
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月18日 Administrator v1.0.0 修改原因
	 */
	@Override
	public void run() {

		try {
			serverScoket = new ServerSocket();

			serverScoket.bind(new InetSocketAddress(ServerIP, ServerPort));
			// 端口复用
			serverScoket.setReuseAddress(true);
			log.error("socket start");

			while (FLAG) {
				try {
					// 侦听并接受到此套接字的连接。
					socket = serverScoket.accept();
					// 打印连接地址
					log.error(socket.getInetAddress().getHostAddress());
					// 指定超时时间
					socket.setSoTimeout(1000 * 20);

					SpriteAnalysisSocketThread spriteAnalysisSocketThread = new SpriteAnalysisSocketThread(socket, 1);
					boolean running = spriteAnalysisSocketThread.isRunning();
					if (running) {
						// MAC 地址
						String mac = spriteAnalysisSocketThread.getMac();
						if (!map.containsKey(mac)) {
							RealTimeDeviceInfoThread realTimeDeviceInfoThread = new RealTimeDeviceInfoThread(1,
									projectService);
							// 开启心跳包线程
							Thread t = new Thread(spriteAnalysisSocketThread);
							Thread t1 = new Thread(realTimeDeviceInfoThread);
							threadPoolTaskExecutor.execute(t);
							threadPoolTaskExecutor.execute(t1);
							// 请求灯光和视频文件包
							byte[] dataByte = PageageUtils.assemblyDataPackage(0x1021, null);
							// 发送
							SpriteAnalysisSocketThread.transmit(spriteAnalysisSocketThread, dataByte);
							// 包含（解析录放精灵客户端信息和发送设备信息 线程）
							SpriteAnalysisAndRealTimeDataVo spriteAnalysisAndRealTimeData = new SpriteAnalysisAndRealTimeDataVo(
									spriteAnalysisSocketThread, realTimeDeviceInfoThread);
							// 保存客户端信息到集合中
							map.put(mac, spriteAnalysisAndRealTimeData);
						} else {
							log.error("该线程 已在线!!!!!");
						}

					} else {
						log.error("格式错误!!!!!!!!!");
					}
				} catch (IOException e) {
					log.error("ioe", e);
				} catch (Exception e) {
					e.printStackTrace();
					log.error("Exc", e);
				}

			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	/**
	 * 
	 * @Function: SocketThread.java
	 * @Description: 删除线程
	 *
	 * @param: uid
	 *             设备UID
	 * @return: void
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: Administrator
	 * @date: 2019年1月16日 下午5:28:56
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月16日 Administrator v1.0.0 修改原因
	 */
	public static void removeMap(String mac) {
		// 判断当前编号是否存在
		SpriteAnalysisAndRealTimeDataVo spriteAnalysisAndRealTimeData = map.get(mac);
		if (spriteAnalysisAndRealTimeData != null) {
			// 中断线程。
			spriteAnalysisAndRealTimeData.getSpriteAnalysisSocketThread().setOK(false);
			spriteAnalysisAndRealTimeData.getRealTimeDeviceInfoThread().setOK(false);
			// 移除
			map.remove(mac);
			log.error("remove succeed mac===>>>" + mac); // 成功
		} else {
			log.error("联系管理员 remove fail mac===>>>" + mac); // 失败
		}
	}

}
