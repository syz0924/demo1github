/**   
 * Copyright © 2019 eSunny Info. Tech Ltd. All rights reserved.
 * 
 * 功能描述：
 * @Package: com.lovdmx.control.common.thread 
 * @author: syz  
 * @date: 2019年3月19日 上午10:32:52 
 */
package com.lovdmx.control.common.thread;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSONObject;
import com.lovdmx.control.common.socket.SpriteServerSocketThread;
import com.lovdmx.control.common.socket.WebSocket;
import com.lovdmx.control.common.utils.OpCodeAnalysisServiceUtils;
import com.lovdmx.control.common.utils.SocketUtils;
import com.lovdmx.control.pojo.UploadVideos;

/**
 * Copyright: Copyright (c) 2019 LanRu-Caifu
 * 
 * @ClassName: ProjectAnalysisOpCodeThread.java
 * @Description: 该类的功能描述
 *
 * @version: v1.0.0
 * @author: syz
 * @date: 2019年3月19日 上午10:32:52
 *
 */
public class ProjectAnalysisOpCodeThread extends SocketUtils implements Runnable {

	// 启动线程
	private boolean isOK = true;
	// web客户端 传入数据
	private Map<String, JSONObject> webClientDataMap = Collections.synchronizedMap(new HashMap<String, JSONObject>());
	// 录放精灵客户端 然后数据
	private List<JSONObject> socketClientDataList = Collections.synchronizedList(new ArrayList<JSONObject>());

	@Override
	public void run() {
		List<JSONObject> dataList = Collections.synchronizedList(new ArrayList<JSONObject>());
		while (isOK) {
			synchronized (this) {
				dataList = socketClientDataList;
			}
			if (dataList.size() > 0) {
				JSONObject json = dataList.get(0);
				// opCode
				Integer opCode = (Integer) json.get("opCode");
				String uuid = null;
				try {
					if (opCode == 0x1022) {
						// 组装 文件上传状态
						String dataJson = OpCodeAnalysisServiceUtils.getAssembleDeviceInfo(json);
						json.put("dataJson", dataJson);
						// 赋值最新的文件信息
						SpriteServerSocketThread.setDirectoryListData(dataJson);
					} else {
						// 获取key 标识 UUID
						uuid = (String) json.get("uuid");
						// 根据uuid获取 客户端传入的数据
						JSONObject webClientData = webClientDataMap.get(uuid);
						if (opCode == 0x1026) {
							Integer status = (Integer) json.get("status");
							// 判断是否成功
							if (status == 1 || status == 2) {
								UploadVideos uploadVideo = null;
								if (status == 2) {
									// 判断是否存在
									uploadVideo = uploadVideosService.findByMd5((String) json.get("md5"));
								}
								// 不存在添加
								if (uploadVideo == null) {
									// 上传成功添加 记录
									OpCodeAnalysisServiceUtils.addUploadVideoOrEdlmxFile(json, webClientData);
									webClientData.put("operationMode", "add");
									webClientData.put("projectId", json.get("projectId"));
									// 添加操作日志
									OpCodeAnalysisServiceUtils.addLogInfo(webClientData);

									// 目录列表添加json中
									json.put("dataJson", SpriteServerSocketThread.getDirectoryListData());
									// 更新 目录文件列表
									String dataJson = OpCodeAnalysisServiceUtils.getAssembleDeviceInfo(json);
									json.put("dataJson", dataJson);
									// 赋值最新的文件信息
									SpriteServerSocketThread.setDirectoryListData(dataJson);
								}
							}
							// 视频切割策略的反馈
						} else if (opCode == 0x1006) {

							// 灯光文件切割策略的反馈
						} else if (opCode == 0x1007) {

							// 任务策略的反馈
						} else if (opCode == 0x1008) {

							// 暂停任务策略
						} else if (opCode == 0x1009) {

							// 恢复任务策略
						} else if (opCode == 0x1010) {

						}
					}
					// 广播给所有客户端
					WebSocket.sendDataInfo(json.toJSONString());
				} catch (Exception ex) {
					ex.printStackTrace();
				} finally {
					// 移除
					socketClientDataList.remove(0);
					webClientDataMap.remove(uuid);
				}
			} else {
				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public void setOK(boolean isOK) {
		this.isOK = isOK;
	}

	public void addJSONObject(JSONObject jsonObject) {
		this.socketClientDataList.add(jsonObject);
	}

	public void addMapInfo(String uuid, JSONObject jsonObject) {
		webClientDataMap.put(uuid, jsonObject);
	}

	public JSONObject getMapInfo(String uuid) {
		return webClientDataMap.get("uuid");
	}

}
