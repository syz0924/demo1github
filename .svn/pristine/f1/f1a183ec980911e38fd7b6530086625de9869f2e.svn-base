package com.lovdmx.control.common.utils;

import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.lovdmx.control.common.socket.SpriteServerSocketThread;
import com.lovdmx.control.common.thread.ProjectAnalysisDeviceThread;
import com.lovdmx.control.common.thread.ProjectAnalysisOpCodeThread;
import com.lovdmx.control.httpVo.ProjectThreadVo;
import com.lovdmx.control.pojo.Project;
import com.lovdmx.control.service.ErrService;
import com.lovdmx.control.service.LogService;
import com.lovdmx.control.service.ProjectService;
import com.lovdmx.control.service.UploadEdlmxService;
import com.lovdmx.control.service.UploadVideosService;

/**
 * 将socket service随tomcat启动
 * 
 * @author syz
 * 
 */
public class SocketServiceLoader implements ServletContextListener {
	// socket server 线程
	private Thread rtrThread = null;

	private ServletContext servletContext;

	private Thread spriteThread;

	@Override
	public void contextDestroyed(ServletContextEvent arg0) {
		// 关闭线程
		if (rtrThread != null && !rtrThread.isInterrupted()) {
			// socketThread.closeSocketServer();
			rtrThread.interrupt();
		}
		if (spriteThread != null && spriteThread.isAlive()) {
			spriteThread.interrupt();
		}
	}

	@Override
	public void contextInitialized(ServletContextEvent servletContextEvent) {
		// TODO Auto-generated method stub
		servletContext = servletContextEvent.getServletContext();
		// 获取IOC所有对象
		WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(servletContext);
		// 注入
		// 连接池
		ThreadPoolTaskExecutor threadPoolTaskExecutor = (ThreadPoolTaskExecutor) context
				.getBean("threadPoolTaskExecutor");
		// 项目业务层
		ProjectService projectService = (ProjectService) context.getBean("projectService");
		// 已上传视频业务层
		UploadVideosService uploadVideosService = (UploadVideosService) context.getBean("uploadVideosService");
		// 已上传灯光业务层
		UploadEdlmxService uploadEdlmxService = (UploadEdlmxService) context.getBean("uploadEdlmxService");
		// 日志业务层
		LogService logService = (LogService) context.getBean("logService");
		// 日志业务层
		ErrService errService = (ErrService) context.getBean("errService");
		// 初始化 业务层对象
		SocketUtils.setInitServiceObject(threadPoolTaskExecutor, projectService, uploadVideosService,
				uploadEdlmxService, logService, errService);
		List<Project> projectList = projectService.findAll();
		// 遍历所有项目 开启每个项目中的公共线程
		for (Project project : projectList) {
			ProjectAnalysisDeviceThread projectAnalysisDeviceThread = new ProjectAnalysisDeviceThread(
					project.getProjectId());
			ProjectAnalysisOpCodeThread projectAnalysisOpCodeThread = new ProjectAnalysisOpCodeThread();
			Thread t1 = new Thread(projectAnalysisDeviceThread);
			Thread t2 = new Thread(projectAnalysisOpCodeThread);
			ProjectThreadVo projectThreadVo = new ProjectThreadVo(projectAnalysisDeviceThread,
					projectAnalysisOpCodeThread);
			threadPoolTaskExecutor.execute(t1);
			threadPoolTaskExecutor.execute(t2);
			// 键 = key+projectId
			SocketUtils.projectThreadMap.put(SocketUtils.key + project.getProjectId(), projectThreadVo);
		}
		// 启动 录放精灵socket
		spriteThread = new Thread(new SpriteServerSocketThread());
		threadPoolTaskExecutor.execute(spriteThread);
	}
}