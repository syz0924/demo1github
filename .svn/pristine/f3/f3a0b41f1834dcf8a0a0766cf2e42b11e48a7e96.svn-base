package com.lovdmx.control.common.thread;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.SocketTimeoutException;

import com.alibaba.fastjson.JSONObject;
import com.lovdmx.control.common.exception.OpCodeNotExitException;

/**
 * Copyright: Copyright (c) 2019 LanRu-Caifu
 * 
 * @ClassName: RTRAnalysisSocketThread.java
 * @Description: 解析客户端连接Socket的信息
 *
 * @version: v1.0.0
 * @author: syz
 * @date: 2019年1月18日 下午5:17:01
 *
 */
public class SpriteAnalysisSocketThread extends ThreadUtil implements Runnable {

	// 服务端socket
	private Socket socket;

	// 线程锁
	private Object object = new Object();

	// 判断传送格式是否正确
	private boolean isRunning;

	// 启动线程
	private boolean isOK = true;

	// 输出流
	private DataOutputStream dos = null;

	// 输入流
	private DataInputStream dis = null;

	// 线程状态
	private boolean isStop = true;
	// MAC 地址
	private String mac;

	// OpCode
	private short opCode;

	// 判断是否是 反馈包 (true:反馈包)
	private boolean feedbackState = false;

	// 构造函数
	public SpriteAnalysisSocketThread(Socket socket) {
		this.socket = socket;
		// 初始化
		this.isRunning = init();
	}

	public void setOK(boolean isOK) {
		this.isOK = isOK;
	}

	public boolean isRunning() {
		return isRunning;
	}

	public void setRunning(boolean isRunning) {
		this.isRunning = isRunning;
	}

	public String getMac() {
		return mac;
	}

	/**
	 * 
	 * @Function: RTRAnalysisSocketThread.java
	 * @Description: 初始化,判断客户端连接格式是否正确
	 *
	 * @param:描述1描述
	 * @return: boolean
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: Administrator
	 * @date: 2019年1月22日 下午4:01:46
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月22日 Administrator v1.0.0 修改原因
	 */
	public boolean init() {

		try {
			if (dis == null) {
				dis = new DataInputStream(socket.getInputStream());
			}
			// 获取 客户端的数据
			JSONObject jSONObject = judgeFormat(dis);
			boolean running = (boolean) jSONObject.get("isRunning");
			// 判断 格式 是否正确
			if (running) {
				// 获取opCode
				short opCode = (short) jSONObject.get("opCode");
				receiveData(opCode, dis);
				return true;
			} else {
				return false;
			}
		} catch (SocketTimeoutException e) {
			log.error("init=========>>>> Socket timed out!");
		} catch (OpCodeNotExitException e) {
			log.error("init=========>>>>" + e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			log.error("init=========>>>>" + e);
		}

		return false;
	}

	/**
	 * @see java.lang.Runnable#run()
	 * @Function: RTRAnalysisSocketThread.java
	 * @Description: 解析Socket的信息线程
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年1月18日 下午5:17:23
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月18日 Administrator v1.0.0 修改原因
	 */
	@Override
	public void run() {
		boolean is_Stop = false;
		try {
			// 心跳获取客户端传的值
			while (isOK) {
				synchronized (this) {
					is_Stop = isStop;
				}
				if (is_Stop) {
					if (dis == null)
						dis = new DataInputStream(socket.getInputStream());
					// 接收
					JSONObject json = judgeFormat(dis);
					isRunning = (boolean) json.get("isRunning");
					if (!isRunning) {
						// 格式错误
						log.error("解析格式错误 throw Exception=============>>>>>");
						throw new Exception();
					}
					// 获取opCode，判断是否是反馈数据
					short opCode = (short) json.get("opCode");
					receiveData(opCode, dis);
				} else {
					// 休眠
					Thread.sleep(300);
				}
			}
			// 客户端 关闭时
		} catch (SocketTimeoutException e) {
			log.error("run=========>>>>Socket timed out!");
			// 关闭流
			ThreadUtil.close(socket, dis, dos);
		} catch (IOException e) {
			log.error("run=========>>>>Socket close " + e.getMessage());
			// 关闭流
			ThreadUtil.close(socket, dis, dos);
		} catch (OpCodeNotExitException e) {
			log.error("run=========>>>>opCode " + e.getMessage());
			// 关闭流
			ThreadUtil.close(socket, dis, dos);
		} catch (Exception e) {
			// 关闭流
			ThreadUtil.close(socket, dis, dos);
			log.error("run error=========>>>" + e.getMessage());
		}
	}

	/**
	 * 传送 给客服端 发送发给客户端数据
	 * 
	 * @param bytes
	 *            传送给客户端的数据
	 * @param data
	 *            时间戳
	 * @return
	 */
	public JSONObject send(byte[] bytes) {
		JSONObject jSONObject = null;
		synchronized (object) {
			try {
				// 暂停线程
				isStop = false;
				// 传送值给客户端
				dos.write(bytes);
				// 数据输入
				jSONObject = clientFeedback();
				// 开启线程
				isStop = true;
			} catch (SocketTimeoutException e) {
				log.error("client socket timed  out!");
				// 关闭流
				ThreadUtil.close(socket, dis, dos);
			} catch (IOException e) {
				log.error("client socket close");
				// 关闭流
				ThreadUtil.close(socket, dis, dos);
			} catch (Exception e) {
				log.error("send error===>>" + e);
				// 关闭流
				ThreadUtil.close(socket, dis, dos);
			}
		}
		return jSONObject;
	}

	/**
	 * 获取客户端反馈信息
	 * 
	 * @return JSONObject
	 * @throws Exception
	 *
	 */
	public synchronized JSONObject clientFeedback()
			throws IOException, SocketTimeoutException, OpCodeNotExitException, Exception {
		JSONObject jSONObject = null;

		// 获取全局变量
		short opCode = this.opCode;
		do {
			if (opCode == -1 || opCode == 1020) {
				// 客户端返回数据
				jSONObject = judgeFormat(dis);
				// 判断格式是否正确
				isRunning = (boolean) jSONObject.get("isRunning");
				if (!isRunning) {
					// 格式错误,抛出异常
					throw new IOException();
				}
				// 获取opCode
				opCode = (short) jSONObject.get("opCode");
			}
			// 读取数据
			jSONObject = receiveData(opCode, dis);
			// 判断读取数据 是否是心跳包,如果是就过滤
			feedbackState = (boolean) jSONObject.get("feedbackState");
		} while (!feedbackState);
		this.opCode = -1;
		return jSONObject;
	}

	/**
	 * 
	 * @Function: RTRAnalysisSocketThread.java
	 * @Description: 判断文件格式
	 *
	 * @param dis
	 *            输入流
	 * @return：IOException, SocketTimeoutException
	 * @throws：异常描述
	 *
	 * @version: v1.0.0
	 * @author: syz
	 * @date: 2019年1月22日 下午3:59:02
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月22日 Administrator v1.0.0 修改原因
	 */
	public synchronized JSONObject judgeFormat(DataInputStream dis) throws IOException, SocketTimeoutException {
		JSONObject jsonObject = new JSONObject();
		byte[] byHead = new byte[3];
		// 读取头部
		dis.readFully(byHead, 0, 7);
		// 把读取的字节数组转成字符串
		String head = new String(byHead);
		if (head.equals("CCS")) {
			// 读取opCode(唯一标识)
			short opCode = dis.readShort();
			// 版本号
			dis.readShort();
			// 内容长度
			short length = dis.readShort();
			// CRC16校验值
			short parityBit = dis.readShort();
			jsonObject.put("isRunning", true);
			jsonObject.put("opCode", opCode);
			jsonObject.put("parityBit", parityBit);
			jsonObject.put("length", length);
		} else {
			jsonObject.put("isRunning", false);
		}
		return jsonObject;
	}

	/**
	 * 
	 * @Function: RTRAnalysisSocketThread.java
	 * @Description: 根据opCode 读取客户端数据
	 *
	 * @param opCode
	 *            标识
	 * @param dis
	 *            输入流
	 * @return JSONObject
	 * @throws SocketTimeoutException(抛出
	 *             超时异常), OpCodeNotExitException(抛出 自定义OpCode异常)
	 *
	 * @version: v1.0.0
	 * @author: Administrator
	 * @date: 2019年1月22日 下午4:00:04
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2019年1月22日 Administrator v1.0.0 修改原因
	 */
	public synchronized JSONObject receiveData(short opCode, DataInputStream dis)
			throws IOException, SocketTimeoutException, OpCodeNotExitException, Exception {
		JSONObject jSONObject = new JSONObject();
		if (opCode == 1020) {
			// 角色ID
			dis.read();
			dis.readShort();
		} else if (opCode == 2200) {

		} else {
			// opCode不存在
			throw new OpCodeNotExitException("opCode  not exist");
		}
		return jSONObject;
	}

	public static void main(String[] args) {

	}

}
